




















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `BMDBConnection`
//     Provider:               `MySql.Data.MySqlClient`
//     Connection String:      `server=localhost;user id=root;password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace BMDBConnection
{

	public partial class BMDBConnectionDB : Database
	{
		public BMDBConnectionDB() 
			: base("BMDBConnection")
		{
			CommonConstruct();
		}

		public BMDBConnectionDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			BMDBConnectionDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static BMDBConnectionDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new BMDBConnectionDB();
        }

		[ThreadStatic] static BMDBConnectionDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static BMDBConnectionDB repo { get { return BMDBConnectionDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("buildingmaintenancedb.buildings")]



	[PrimaryKey("BuildingID")]




	[ExplicitColumns]

    public partial class building : BMDBConnectionDB.Record<building>  
    {



		[Column] public int BuildingID { get; set; }





		[Column] public string BuildingName { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public int SocietyID { get; set; }





		[Column] public bool ParkingAvailable { get; set; }





		[Column] public string ContactNo { get; set; }



	}

    

	[TableName("buildingmaintenancedb.buildingusers")]



	[PrimaryKey("UserID")]




	[ExplicitColumns]

    public partial class buildinguser : BMDBConnectionDB.Record<buildinguser>  
    {



		[Column] public int UserID { get; set; }





		[Column] public string UserName { get; set; }





		[Column] public string ContactNo { get; set; }





		[Column] public string Address { get; set; }



	}

    

	[TableName("buildingmaintenancedb.cpsidemenunavigations")]



	[PrimaryKey("CPSideMenuNavigationID")]




	[ExplicitColumns]

    public partial class cpsidemenunavigation : BMDBConnectionDB.Record<cpsidemenunavigation>  
    {



		[Column] public int CPSideMenuNavigationID { get; set; }





		[Column] public string RouteName { get; set; }





		[Column] public string RouteURL { get; set; }





		[Column] public string LinkUrl { get; set; }





		[Column] public string ControllerAction { get; set; }





		[Column] public string ViewName { get; set; }





		[Column] public string DisplayText { get; set; }





		[Column] public string AdditionalText { get; set; }





		[Column] public string IconClass { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public decimal SequenceNo { get; set; }





		[Column] public int? ParentNavigationID { get; set; }





		[Column] public int? EntityID { get; set; }





		[Column] public string ListingScreenJson { get; set; }





		[Column] public string ImportExcelJson { get; set; }





		[Column] public bool IsAddEditAllow { get; set; }



	}

    

	[TableName("buildingmaintenancedb.displaytypes")]



	[PrimaryKey("DisplayTypeID")]




	[ExplicitColumns]

    public partial class displaytype : BMDBConnectionDB.Record<displaytype>  
    {



		[Column] public short DisplayTypeID { get; set; }





		[Column] public string DisplayTypeName { get; set; }





		[Column] public bool IsActive { get; set; }



	}

    

	[TableName("buildingmaintenancedb.entities")]



	[PrimaryKey("EntityID")]




	[ExplicitColumns]

    public partial class entity : BMDBConnectionDB.Record<entity>  
    {



		[Column] public short EntityID { get; set; }





		[Column] public string EntityName { get; set; }





		[Column] public bool IsActive { get; set; }



	}

    

	[TableName("buildingmaintenancedb.entitydetails")]



	[PrimaryKey("EntityDetailID")]




	[ExplicitColumns]

    public partial class entitydetail : BMDBConnectionDB.Record<entitydetail>  
    {



		[Column] public int EntityDetailID { get; set; }





		[Column] public short? EntityID { get; set; }





		[Column] public short DisplayTypeID { get; set; }





		[Column] public string ColumnName { get; set; }





		[Column] public string DisplayName { get; set; }





		[Column] public bool IsRequired { get; set; }





		[Column] public bool IsPrimaryKey { get; set; }





		[Column] public bool IsForeignKey { get; set; }





		[Column] public string RefrencedTableJson { get; set; }





		[Column] public bool IsAutoGenerated { get; set; }





		[Column] public short MaxLength { get; set; }





		[Column] public short DbTypeID { get; set; }





		[Column] public bool IsVisible { get; set; }





		[Column] public bool IsFileUpload { get; set; }



	}

    

	[TableName("buildingmaintenancedb.floors")]



	[PrimaryKey("FloorID")]




	[ExplicitColumns]

    public partial class floor : BMDBConnectionDB.Record<floor>  
    {



		[Column] public int FloorID { get; set; }





		[Column] public string FloorName { get; set; }





		[Column] public decimal FloorRate { get; set; }





		[Column] public bool IsActive { get; set; }



	}

    

	[TableName("buildingmaintenancedb.officefloordetails")]



	[PrimaryKey("OfficeFloorDetailID")]




	[ExplicitColumns]

    public partial class officefloordetail : BMDBConnectionDB.Record<officefloordetail>  
    {



		[Column] public int OfficeFloorDetailID { get; set; }





		[Column] public int OfficeFloorID { get; set; }





		[Column] public decimal MonthlyAmount { get; set; }





		[Column] public DateTime PaidDate { get; set; }





		[Column] public decimal? Contribution { get; set; }





		[Column] public decimal? ParkingFees { get; set; }





		[Column] public decimal? MembershipFees { get; set; }
		[Column] public decimal? Total { get; set; }
		[Column] public int ForYear { get; set; }
		[Column] public int Month { get; set; }
	}



	[TableName("buildingmaintenancedb.officefloors")]



	[PrimaryKey("OfficeFloorID")]




	[ExplicitColumns]

    public partial class officefloor : BMDBConnectionDB.Record<officefloor>  
    {



		[Column] public int OfficeFloorID { get; set; }





		[Column] public int FloorID { get; set; }





		[Column] public int OfficeID { get; set; }





		[Column] public int BuildingID { get; set; }





		[Column] public short OfficeStatusID { get; set; }





		[Column] public string OfficeNo { get; set; }





		[Column] public decimal Space { get; set; }



	}

    

	[TableName("buildingmaintenancedb.offices")]



	[PrimaryKey("OfficeID")]




	[ExplicitColumns]

    public partial class office : BMDBConnectionDB.Record<office>  
    {



		[Column] public int OfficeID { get; set; }





		[Column] public string OfficeName { get; set; }





		[Column] public short OfficeStatusID { get; set; }





		[Column] public int UserID { get; set; }





		[Column] public decimal? GrandTotal { get; set; }



	}

    

	[TableName("buildingmaintenancedb.officestatuses")]



	[PrimaryKey("OfficeStatusID")]




	[ExplicitColumns]

    public partial class officestatus : BMDBConnectionDB.Record<officestatus>  
    {



		[Column] public short OfficeStatusID { get; set; }





		[Column] public string StatusName { get; set; }





		[Column] public bool IsActive { get; set; }



	}

    

	[TableName("buildingmaintenancedb.permissions")]



	[PrimaryKey("PermissionID")]




	[ExplicitColumns]

    public partial class permission : BMDBConnectionDB.Record<permission>  
    {



		[Column] public short PermissionID { get; set; }





		[Column] public string PermissionName { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public string Description { get; set; }



	}

    

	[TableName("buildingmaintenancedb.recordstatuses")]



	[PrimaryKey("RecordStatusID")]




	[ExplicitColumns]

    public partial class recordstatus : BMDBConnectionDB.Record<recordstatus>  
    {



		[Column] public short RecordStatusID { get; set; }





		[Column] public string RecordStatusName { get; set; }





		[Column] public string Description { get; set; }



	}

    

	[TableName("buildingmaintenancedb.roles")]



	[PrimaryKey("RoleID")]




	[ExplicitColumns]

    public partial class role : BMDBConnectionDB.Record<role>  
    {



		[Column] public int RoleID { get; set; }





		[Column] public string RoleName { get; set; }





		[Column] public short RecordStatusID { get; set; }





		[Column] public string Description { get; set; }



	}

    

	[TableName("buildingmaintenancedb.roles_permissions")]



	[PrimaryKey("RolePermissionID")]




	[ExplicitColumns]

    public partial class roles_permission : BMDBConnectionDB.Record<roles_permission>  
    {



		[Column] public int RolePermissionID { get; set; }





		[Column] public int RoleID { get; set; }





		[Column] public short PermissionID { get; set; }





		[Column] public int CPSideMenuNavigationID { get; set; }





		[Column] public bool IsActive { get; set; }



	}

    

	[TableName("buildingmaintenancedb.societies")]



	[PrimaryKey("SocietyID")]




	[ExplicitColumns]

    public partial class society : BMDBConnectionDB.Record<society>  
    {



		[Column] public int SocietyID { get; set; }





		[Column] public string SocietyName { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public int? NoOfBuildings { get; set; }



	}

    

	[TableName("buildingmaintenancedb.userroles")]



	[PrimaryKey("UserRoleID")]




	[ExplicitColumns]

    public partial class userrole : BMDBConnectionDB.Record<userrole>  
    {



		[Column] public int UserRoleID { get; set; }





		[Column] public int UserID { get; set; }





		[Column] public int RoleID { get; set; }





		[Column] public bool IsActive { get; set; }



	}

    

	[TableName("buildingmaintenancedb.users")]



	[PrimaryKey("UserID")]




	[ExplicitColumns]

    public partial class user : BMDBConnectionDB.Record<user>  
    {



		[Column] public int UserID { get; set; }





		[Column] public string FirstName { get; set; }





		[Column] public string LastName { get; set; }





		[Column] public string UserName { get; set; }





		[Column] public string DisplayName { get; set; }





		[Column] public string Email { get; set; }





		[Column] public string Password { get; set; }





		[Column] public short UserStatusID { get; set; }





		[Column] public bool IsCPUser { get; set; }





		[Column] public int? ParentUserID { get; set; }



	}

    

	[TableName("buildingmaintenancedb.userstatuses")]



	[PrimaryKey("UserStatusID")]




	[ExplicitColumns]

    public partial class userstatus : BMDBConnectionDB.Record<userstatus>  
    {



		[Column] public short UserStatusID { get; set; }





		[Column] public string UserStatusName { get; set; }





		[Column] public string Description { get; set; }





		[Column] public bool IsActive { get; set; }



	}


}
