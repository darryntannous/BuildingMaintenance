using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using BuildingMaintenance.CommonCode;
using BuildingMaintenance.CommonCode.Helpers;
using BuildingMaintenance.Enums;
using BuildingMaintenance.Services;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Org.BouncyCastle.Ocsp;
using static BuildingMaintenance.CommonCode.Helpers.CommonHelper;

namespace BuildingMaintenance.Controllers
{
    public class DynamicController : BaseController
    {
        AuthenticationService authenticationService;
        public DynamicController(AuthenticationService authenticationService)
        {
            this.authenticationService = authenticationService;
        }



        [HttpPost]
        public JsonResult SaveUpdateRecord(IFormCollection form)
        {
            Response response = new Response();
            try
            {
                List<TableDetailed> tablesList = new List<TableDetailed>();
                foreach (var item in form.Keys.Where(x => x.StartsWith("table-")).ToList())
                {
                    tablesList.Add(JsonConvert.DeserializeObject<TableDetailed>(form[item]));
                }
                foreach (var table in tablesList.OrderBy(x => x.DisplaySeqNo))
                {
                    bool alreadyactionPerformed = false;
                    Dictionary<string, object> poco = new Dictionary<string, object>();
                    var tablePoco = Activator.CreateInstance(Type.GetType(string.Format("BMDBConnection.{0}", table.TableName.Singlofy().ToLower())));
                    List<string> additionalFields = new List<string> { "modifiedon", "modifiedby" };
                    var columnKeys = form.Keys.Where(x => x.StartsWith(table.TableName + "-")).Select(x => string.Join("-", x.Split("-".ToCharArray(), StringSplitOptions.RemoveEmptyEntries).Take(2))).Distinct().ToList();
                    var rows = new List<short>() { 1 };
                    TableRowDetailed primaryColumnRecord = new TableRowDetailed();
                    if (table.Rows == 0)
                    {
                        rows = new List<short>();
                    }
                    else if (form.Keys.Where(x => x.StartsWith(table.TableName + "-")).Select(x => (x.Split("-".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)).Length).Distinct().Any(x => x > 2))
                    {
                        rows = form.Keys.Where(x => x.StartsWith(table.TableName + "-")).Select(x => short.Parse(x.Split("-".ToCharArray(), StringSplitOptions.RemoveEmptyEntries).Last())).Distinct().ToList();
                    }
                    List<string> tablePocoColumns = tablePoco.GetType().GetProperties().Select(x => x.Name.ToLower()).ToList();
                    foreach (var index in rows)
                    {
                        //var fieldValues = form.AllKeys.Where(x => x.StartsWith(table.TableName + "-")).ToDictionary(param => param, param => form[param], StringComparer.OrdinalIgnoreCase);
                        foreach (var item in columnKeys)
                        {
                            string columnKey = form.Keys.Contains(item) ? item : (item + "-" + index);
                            if (!string.IsNullOrEmpty(form[columnKey]))
                            {
                                var tableRecord = JsonConvert.DeserializeObject<TableRowDetailed>(form[columnKey]);
                                if (tableRecord.IsPrimaryKey)
                                {
                                    primaryColumnRecord = tableRecord;
                                    table.IsNewRecord = tableRecord.IsNewRecord;
                                }
                                if (!tableRecord.IsAutoGenerated && !tableRecord.IsPrimaryKey)
                                {
                                    object value = tableRecord.Value;
                                    //if (!string.IsNullOrEmpty(tableRecord.Type) && tableRecord.Type.ToLower() == "file")
                                    //{
                                    //    HttpPostedFileBase file = Request.Files[columnKey];
                                    //    if (file != null)
                                    //    {
                                    //        Guid guid = Guid.NewGuid();
                                    //        var fileName = Path.GetFileName(file.FileName);
                                    //        var path = Path.Combine(HttpRuntime.AppDomainAppPath, @"uploads\" + guid.ToString()) + "." + file.FileName.Split('.').LastOrDefault();
                                    //        file.SaveAs(path);
                                    //        tableRecord.Value = CPAppConfigs.ControlPanelURL + @"uploads/" + guid.ToString() + "." + file.FileName.Split('.').LastOrDefault();
                                    //    }
                                    //}
                                    //else
                                    //{

                                    //}
                                    poco.Add(string.Format("{0}##{1}", tableRecord.ColumnName, tableRecord.IsStringColumn), tableRecord.Value);
                                }
                            }
                        }
                        if (poco.Count > 0 && primaryColumnRecord.ActionType != (short)ActionTypesEnum.Same)
                        {
                            if (table.IsNewRecord)
                            {
                                foreach (var extraFields in new List<string> { "createdon", "createdby" })
                                {
                                    if (!additionalFields.Exists(x => x.Equals(extraFields)))
                                        additionalFields.Add(extraFields);
                                }
                            }
                            foreach (var add in additionalFields.Where(x => tablePocoColumns.Contains(x)))
                            {
                                if (add.EndsWith("on"))
                                    poco.Add(string.Format("{0}##{1}", add, true), DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));
                                else
                                    poco.Add(string.Format("{0}##{1}", add, true), authenticationService.User.UserID);
                            }
                            foreach (var otherColumns in table.TableOtherColumns.Where(x => !string.IsNullOrEmpty(x.Column)).ToList())
                            {
                                var value = form[otherColumns.Column];
                                if (otherColumns.IsRequired && string.IsNullOrEmpty(value))
                                {
                                    break;
                                }
                                if (otherColumns.Rows == -1)
                                {
                                    //bool isFirst = true;
                                    foreach (var item in form.Keys.Where(x => x.StartsWith(otherColumns.Column)))
                                    {
                                        List<string> additionalcolumns = new List<string>();
                                        string columnKey = form.Keys.Contains(item) ? item : (item + "-" + item.Split('-').Last());
                                        var otherTableRecord = JsonConvert.DeserializeObject<TableRowDetailed>(form[columnKey]);
                                        if (otherColumns.IsRequired && otherTableRecord.Value == null)
                                        {
                                            break;
                                        }
                                        additionalcolumns.Add(string.Format("{0}##{1}", otherTableRecord.ColumnName, true));
                                        poco.Add(additionalcolumns.Last(), otherTableRecord.Value);
                                        if (table.IsNewRecord || otherTableRecord.IsNewRecord)
                                        {
                                            primaryColumnRecord.Value = CommonServices.Instance.DynamicInsert(table.TableName, primaryColumnRecord.ColumnName, poco);
                                            columnKey = form.Keys.Contains(table.TableName + "-" + primaryColumnRecord.ColumnName) ? table.TableName + "-" + primaryColumnRecord.ColumnName : (table.TableName + "-" + primaryColumnRecord.ColumnName + "-" + index);
                                            //form[columnKey] = JsonConvert.SerializeObject(primaryColumnRecord);
                                            alreadyactionPerformed = true;
                                        }
                                        else
                                        {
                                            if (primaryColumnRecord.ActionType == (short)ActionTypesEnum.Delete)
                                            {
                                                if (table.TableRowBeforeDelete != null && !string.IsNullOrEmpty(table.TableRowBeforeDelete.Table))
                                                {
                                                    CommonServices.Instance.DynamicDelete(table.TableRowBeforeDelete.Table, primaryColumnRecord.ColumnName, primaryColumnRecord.Value);
                                                }
                                                string columnName = primaryColumnRecord.ColumnName;
                                                object columnValue = primaryColumnRecord.Value;
                                                if (!string.IsNullOrEmpty(table.DeletedColumnName))
                                                {
                                                    string deletedColumnName = table.DeletedColumnName;
                                                    deletedColumnName = form.Keys.Contains(deletedColumnName + "-" + index) ? deletedColumnName + "-" + index : deletedColumnName;
                                                    columnName = deletedColumnName;
                                                    var deletedColumnRecord = JsonConvert.DeserializeObject<TableRowDetailed>(form[columnName]);
                                                    columnName = deletedColumnRecord.ColumnName;
                                                    columnValue = deletedColumnRecord.Value;
                                                }
                                                CommonServices.Instance.DynamicDelete(table.TableName, columnName, columnValue);
                                            }
                                            else
                                            {
                                                CommonServices.Instance.DynamicUpdateWithCustom(table.TableName, primaryColumnRecord.ColumnName, primaryColumnRecord.Value, poco);
                                            }
                                            alreadyactionPerformed = true;
                                        }
                                        foreach (var extra in additionalcolumns)
                                        {
                                            poco.Remove(extra);
                                        }
                                    }
                                    poco.Clear();
                                }
                                else
                                {
                                    string columnKey = form.Keys.Contains(otherColumns.Column) ? otherColumns.Column : (otherColumns.Column + "-1");
                                    var otherTableRecord = JsonConvert.DeserializeObject<TableRowDetailed>(form[columnKey]);
                                    poco.Add(string.Format("{0}##{1}", otherTableRecord.ColumnName, true), otherTableRecord.Value);
                                }
                            }
                            if (!alreadyactionPerformed)
                            {
                                if (table.IsNewRecord)
                                {
                                    primaryColumnRecord.Value = CommonServices.Instance.DynamicInsert(table.TableName, primaryColumnRecord.ColumnName, poco);
                                    string columnKey = form.Keys.Contains(table.TableName + "-" + primaryColumnRecord.ColumnName) ? table.TableName + "-" + primaryColumnRecord.ColumnName : (table.TableName + "-" + primaryColumnRecord.ColumnName + "-" + index);
                                    //form[columnKey] = JsonConvert.SerializeObject(primaryColumnRecord);
                                }
                                else
                                {
                                    if (primaryColumnRecord.ActionType == (short)ActionTypesEnum.Delete)
                                    {
                                        if (table.TableRowBeforeDelete != null && !string.IsNullOrEmpty(table.TableRowBeforeDelete.Table))
                                        {
                                            CommonServices.Instance.DynamicDelete(table.TableRowBeforeDelete.Table, primaryColumnRecord.ColumnName, primaryColumnRecord.Value);
                                        }
                                        string columnName = primaryColumnRecord.ColumnName;
                                        object columnValue = primaryColumnRecord.Value;
                                        if (!string.IsNullOrEmpty(table.DeletedColumnName))
                                        {
                                            string deletedColumnName = table.DeletedColumnName;
                                            deletedColumnName = form.Keys.Contains(deletedColumnName + "-" + index) ? deletedColumnName + "-" + index : deletedColumnName;
                                            columnName = deletedColumnName;
                                            var deletedColumnRecord = JsonConvert.DeserializeObject<TableRowDetailed>(form[columnName]);
                                            columnName = deletedColumnRecord.ColumnName;
                                            columnValue = deletedColumnRecord.Value;
                                        }
                                        CommonServices.Instance.DynamicDelete(table.TableName, columnName, columnValue);
                                    }
                                    else
                                    {
                                        CommonServices.Instance.DynamicUpdateWithCustom(table.TableName, primaryColumnRecord.ColumnName, primaryColumnRecord.Value, poco);
                                    }
                                }
                            }
                        }
                        poco.Clear();
                    }
                }
                response.Success = true;
                response.Message = "Successfully Saved!";
            }
            catch (Exception ex)
            {
                response.Success = false;
                response.Message = ex.Message;
            }
            return Json(response);
        }

        public JsonResult DeleteRecord(IFormCollection form)
        {
            Response response = new Response();
            try
            {
                CommonServices.Instance.DynamicDelete(form["tableName"], form["primaryColumn"], form["primaryColumnValue"]);
            }
            catch(Exception ex)
            {
                response.Success = false;
                response.Message = ex.Message;
            }
            response.Success = true;
            response.Message = "Successfully Deleted!";
            return Json(response);
        }
    }
}